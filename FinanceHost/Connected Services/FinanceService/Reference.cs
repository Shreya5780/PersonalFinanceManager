//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FinanceHost.FinanceService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FinanceService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateAccount", ReplyAction="http://tempuri.org/IService1/CreateAccountResponse")]
        PersonalFinance.Account CreateAccount(PersonalFinance.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateAccount", ReplyAction="http://tempuri.org/IService1/CreateAccountResponse")]
        System.Threading.Tasks.Task<PersonalFinance.Account> CreateAccountAsync(PersonalFinance.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAccount", ReplyAction="http://tempuri.org/IService1/GetAccountResponse")]
        PersonalFinance.Account GetAccount(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAccount", ReplyAction="http://tempuri.org/IService1/GetAccountResponse")]
        System.Threading.Tasks.Task<PersonalFinance.Account> GetAccountAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateAccount", ReplyAction="http://tempuri.org/IService1/UpdateAccountResponse")]
        PersonalFinance.Account UpdateAccount(PersonalFinance.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateAccount", ReplyAction="http://tempuri.org/IService1/UpdateAccountResponse")]
        System.Threading.Tasks.Task<PersonalFinance.Account> UpdateAccountAsync(PersonalFinance.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteAccount", ReplyAction="http://tempuri.org/IService1/DeleteAccountResponse")]
        void DeleteAccount(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteAccount", ReplyAction="http://tempuri.org/IService1/DeleteAccountResponse")]
        System.Threading.Tasks.Task DeleteAccountAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllCategories", ReplyAction="http://tempuri.org/IService1/GetAllCategoriesResponse")]
        PersonalFinance.Category[] GetAllCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllCategories", ReplyAction="http://tempuri.org/IService1/GetAllCategoriesResponse")]
        System.Threading.Tasks.Task<PersonalFinance.Category[]> GetAllCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddCategory", ReplyAction="http://tempuri.org/IService1/AddCategoryResponse")]
        PersonalFinance.Category AddCategory(PersonalFinance.Category category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddCategory", ReplyAction="http://tempuri.org/IService1/AddCategoryResponse")]
        System.Threading.Tasks.Task<PersonalFinance.Category> AddCategoryAsync(PersonalFinance.Category category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateCategory", ReplyAction="http://tempuri.org/IService1/UpdateCategoryResponse")]
        PersonalFinance.Category UpdateCategory(PersonalFinance.Category category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateCategory", ReplyAction="http://tempuri.org/IService1/UpdateCategoryResponse")]
        System.Threading.Tasks.Task<PersonalFinance.Category> UpdateCategoryAsync(PersonalFinance.Category category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteCategory", ReplyAction="http://tempuri.org/IService1/DeleteCategoryResponse")]
        void DeleteCategory(int c_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteCategory", ReplyAction="http://tempuri.org/IService1/DeleteCategoryResponse")]
        System.Threading.Tasks.Task DeleteCategoryAsync(int c_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddTransaction", ReplyAction="http://tempuri.org/IService1/AddTransactionResponse")]
        PersonalFinance.Transaction AddTransaction(PersonalFinance.Transaction transaction, bool isExpence);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddTransaction", ReplyAction="http://tempuri.org/IService1/AddTransactionResponse")]
        System.Threading.Tasks.Task<PersonalFinance.Transaction> AddTransactionAsync(PersonalFinance.Transaction transaction, bool isExpence);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllTransactions", ReplyAction="http://tempuri.org/IService1/GetAllTransactionsResponse")]
        PersonalFinance.Transaction[] GetAllTransactions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllTransactions", ReplyAction="http://tempuri.org/IService1/GetAllTransactionsResponse")]
        System.Threading.Tasks.Task<PersonalFinance.Transaction[]> GetAllTransactionsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : FinanceHost.FinanceService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<FinanceHost.FinanceService.IService1>, FinanceHost.FinanceService.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PersonalFinance.Account CreateAccount(PersonalFinance.Account account) {
            return base.Channel.CreateAccount(account);
        }
        
        public System.Threading.Tasks.Task<PersonalFinance.Account> CreateAccountAsync(PersonalFinance.Account account) {
            return base.Channel.CreateAccountAsync(account);
        }
        
        public PersonalFinance.Account GetAccount(int id) {
            return base.Channel.GetAccount(id);
        }
        
        public System.Threading.Tasks.Task<PersonalFinance.Account> GetAccountAsync(int id) {
            return base.Channel.GetAccountAsync(id);
        }
        
        public PersonalFinance.Account UpdateAccount(PersonalFinance.Account account) {
            return base.Channel.UpdateAccount(account);
        }
        
        public System.Threading.Tasks.Task<PersonalFinance.Account> UpdateAccountAsync(PersonalFinance.Account account) {
            return base.Channel.UpdateAccountAsync(account);
        }
        
        public void DeleteAccount(int id) {
            base.Channel.DeleteAccount(id);
        }
        
        public System.Threading.Tasks.Task DeleteAccountAsync(int id) {
            return base.Channel.DeleteAccountAsync(id);
        }
        
        public PersonalFinance.Category[] GetAllCategories() {
            return base.Channel.GetAllCategories();
        }
        
        public System.Threading.Tasks.Task<PersonalFinance.Category[]> GetAllCategoriesAsync() {
            return base.Channel.GetAllCategoriesAsync();
        }
        
        public PersonalFinance.Category AddCategory(PersonalFinance.Category category) {
            return base.Channel.AddCategory(category);
        }
        
        public System.Threading.Tasks.Task<PersonalFinance.Category> AddCategoryAsync(PersonalFinance.Category category) {
            return base.Channel.AddCategoryAsync(category);
        }
        
        public PersonalFinance.Category UpdateCategory(PersonalFinance.Category category) {
            return base.Channel.UpdateCategory(category);
        }
        
        public System.Threading.Tasks.Task<PersonalFinance.Category> UpdateCategoryAsync(PersonalFinance.Category category) {
            return base.Channel.UpdateCategoryAsync(category);
        }
        
        public void DeleteCategory(int c_id) {
            base.Channel.DeleteCategory(c_id);
        }
        
        public System.Threading.Tasks.Task DeleteCategoryAsync(int c_id) {
            return base.Channel.DeleteCategoryAsync(c_id);
        }
        
        public PersonalFinance.Transaction AddTransaction(PersonalFinance.Transaction transaction, bool isExpence) {
            return base.Channel.AddTransaction(transaction, isExpence);
        }
        
        public System.Threading.Tasks.Task<PersonalFinance.Transaction> AddTransactionAsync(PersonalFinance.Transaction transaction, bool isExpence) {
            return base.Channel.AddTransactionAsync(transaction, isExpence);
        }
        
        public PersonalFinance.Transaction[] GetAllTransactions() {
            return base.Channel.GetAllTransactions();
        }
        
        public System.Threading.Tasks.Task<PersonalFinance.Transaction[]> GetAllTransactionsAsync() {
            return base.Channel.GetAllTransactionsAsync();
        }
    }
}
